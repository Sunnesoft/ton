#!/usr/bin/env fift -s
"TonUtil.fif" include
"SCUtil.fif" include

{ ."usage: " @' $0 type ." <src-addr> <pk> <dest-addr> <seqno> <timeout> <amount> <out-boc>" cr
  ." " cr 1 halt
} : usage
$# 6 - ' usage if

true constant bounce

$1 =: src-file-base
@' $2 +".pk" load-cryptokey =: wallet_pk
$3 bounce parse-load-address =: bounce 2=: dest_addr
$4 parse-int =: seqno
$5 parse-int =: timeout
$6 $>GR =: amount
def? $7 { @' $7 } { "wallet-query" } cond constant savefile

src-file-base +".addr" load-address 2dup 2constant wallet_addr
."Source wallet address = " 2dup .addr cr 6 .Addr cr

."Transferring " amount .GR ."to account "
dest_addr 2dup bounce 7 + .Addr ." = " .addr 
."seqno=0x" seqno x. ."bounce=" bounce . cr
  
// create a message
<b b{01} s, // int_msg_info$0 ihr_disabled:Bool
bounce 1 i, 
b{000100} s, // 000 -?, 10 dest addr_std, 0 no anycast
dest_addr addr, 
amount Gram, 
0 9 64 32 + + 1+ u, // zeros: 1 extra_curr, 4 ihr, 4 fwd, 64 lt, 32 at, 1 init
0 2 u, // 0 body left, 0 body
b>

<b seqno 32 u, 
now timeout + 32 u,
wallet_pk priv>pub B, 
swap ref, // internal message
b>

dup hashu wallet_pk ed25519_sign_uint
<b b{1000100} s, // 10 ext in info, 00 src none, 10 dest std, 0 no anycast
wallet_addr addr, 
b{000000} s, // 0000 fee 0, 0 init, 0 -
swap B, // Signature 
dictnew dict, // signatures list
swap ref, // Body
b>

2 boc+>B dup Bx. cr
savefile +".boc" tuck B>file
."(Saved to file " type .")" cr
